<?php 
/**
 * @file
 * Main Jarvis class
 */

/**
 * Jarvis Class
 */
class Jarvis {

  private $init = FALSE;
  public $hotkey;
  public $ajax_search;

  /**
   * Singleton instance
   */
  private static $instance = FALSE;

  /**
   * Singleton
   */
  public static function instance() {
    if (!self::$instance) {
      self::$instance = new self();
    }
    return self::$instance;
  }

  /**
   * Init Jarvis
   */
  public function init() {
    if ( $this->init ) return;
    $this->init = TRUE;

    // Hotkey is '/'
    $this->hotkey = 191;
    // Ajax search endpoint
    $this->ajax_search = 'jarvis/autocomplete';
  }

  /**
   * Localize Javascript
   * @return string to be embedded with JS
   */
  public function localize() {
    $jarvis = array(
      'hotkey' => $this->hotkey,
      'ajax_search' => url($this->ajax_search),
      'menu_items' => $this->menu_items(),
    );

   return 'var jarvis = ' . json_encode($jarvis) . ';'; //, JSON_PRETTY_PRINT
  }

  /**
   * Perform a search
   * Echos search results to prevent the Drupal templates from being output
   */
  public function search() {
    $q = isset($_REQUEST['q']) ? $_REQUEST['q'] : '';
    // @see https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_like/7
    $q_spaces = str_replace(' ', '%', db_like($srch_qry));

    $response = array(
      'results' => array(), 
      'types' => array(), 
    );

    if ( strlen(trim($q)) ) {
      // Search DB for nodes with related titles.  Sort by relevance of search phrase related to title.
      $query = "SELECT \n" . 
                "  n.nid AS 'id', \n" . 
                "  n.type AS 'type', \n" . 
                "  n.title AS 'title', \n" . 
                "  ((LENGTH(n.title) - LENGTH(REPLACE(LOWER(n.title), LOWER(:q), ''))) / LENGTH(n.title)) AS 'relv_title' \n" . 
                "FROM \n" . 
                "  {node} n \n" . 
                "  LEFT JOIN {taxonomy_index} ti ON n.nid = ti.nid \n" . 
                "  LEFT JOIN {taxonomy_term_data} ttd ON ti.tid = ttd.tid \n" . 
                "WHERE \n" . 
                "  n.title LIKE :qtitle OR \n" . 
                "  n.nid = :qnid OR \n" . 
                "  ttd.`name` LIKE :qname \n" . 
                "ORDER BY relv_title DESC \n" .
                "LIMIT 20";

      // @see https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_query/7
      $result = db_query($query, array(
        ':q' => $q,
        ':qtitle' => '%' . $q_spaces . '%',
        ':qnid' => $q,
        ':qname' => '%' . $q_spaces . '%',
      ));

      // DEBUGGING
      $response['query'] = $query;

      $results = $result->fetchAll();

      foreach ($results as $index => $item) {
        $type = $item->type;
        $id = $item->id;

        if (!isset($arrRtrn['types'][$type])) {
          $response['types'][$type] = array();
        }
        $response['types'][$type][$id] = $index;

        $item = (array) $item;
        $item['edit_url'] = url('node/' . $id . '/edit');
        
        $response['results'][] = $item;
      }
    }

    echo json_encode($response);
  }

  /**
   * Parse through menus to get menu_items
   * @return array
   */
  public function menu_items() {
    $menu_items = array();
    $menus = array('management', 'user-menu');
    $data = array();
    $tree = array();

    // Allows modules to add additional menus
    drupal_alter('jarvis_menus', $menus);

    // Get all menu items
    foreach ($menus as $menu) {
      $data = menu_tree_all_data($menu);
      foreach ($data as $tree) {
        $menu_items = array_merge(
          $menu_items, 
          $this->_menu_items($tree['below'])
        );
      }
    }

    // Merge together with additional menu items
    $menu_items = array_merge($menu_items, $this->_additional_menu_items());

    // Allow modules to alter final menu items
    drupal_alter('jarvis_menu_items', $menu_items);
    
    return $menu_items;
  }

  /**
   * Internal function to parse through menu trees
   * @param array $tree
   * @return array
   */
  public function _menu_items($tree, $parent = NULL) {
    static $id = 0;
    // Prevent runaway menus
    if ( $id++ > 1000 ) return array();

    $menu_items = array();

    foreach ($tree as $menu_item) {
      // Skip inaccessible, invisible links, or links that point their parent.
      if (!$menu_item['link']['access'] 
        || $menu_item['link']['type'] & MENU_LINKS_TO_PARENT 
        || $menu_item['link']['type'] == MENU_VISIBLE_IN_BREADCRUMB 
        || $menu_item['link']['hidden'] == 1) {
        continue;
      }

      $menu_item_parent = $parent;

      if (!empty($menu_item['link']['link_path'])) {
        $menu_item_parent .= $menu_item['link']['link_title'] . ' » ';
        $menu_items[] = array(
          'type' => 'Menu Item',
          'title' => $parent . $menu_item['link']['link_title'],
          'edit_url' => url($menu_item['link']['link_path'])
        );
      }
      if (!empty($menu_item['below'])) {
        $menu_items = array_merge(
            $menu_items, 
            $this->_menu_items($menu_item['below'], $menu_item_parent)
        );
      }
    }

    return $menu_items;
  }

  public function _additional_menu_items() {
    $menu_items = array();

    // Content Types
    if (user_access('administer content types')) {
      foreach (node_type_get_types() as $node_type => $node) {
        $menu_items[] = array(
          'type' => 'Content Type',
          'title' => 'Structure » Content Types » ' . $node->name,
          'edit_url' => url('admin/structure/types/manage/' . $node_type)
        );
      }
    }

    // Taxonomies
    if (user_access('administer taxonomy')) {
      foreach (taxonomy_vocabulary_get_names() as $name => $taxonomy) {
        $menu_items[] = array(
          'type' => 'Taxonomy',
          'title' => 'Structure » Taxonomy » ' . $taxonomy->name,
          'edit_url' => url('admin/structure/taxonomy/' . $name)
        );
      }
    }

    // Nodequeues
    if (module_exists('nodequeue') && user_access('administer nodequeue')) {
      foreach (nodequeue_load_subqueues(nodequeue_get_all_qids()) as $subqueue) {
        $menu_items[] = array(
          'type' => 'Nodequeue',
          'title' => 'Structure » Nodequeues » ' . $subqueue->title,
          'edit_url' => url('admin/structure/nodequeue/' . $subqueue->qid . '/view/' . $subqueue->sqid)
        );
      }
    }

    // Views
    if (module_exists('views') && user_access('administer views')) {
      foreach (views_get_enabled_views() as $name => $view) {
        $menu_items[] = array(
          'type' => 'View',
          'title' => 'Structure » Views » ' . $view->human_name,
          'edit_url' => url('admin/structure/views/view/' . $name)
        );
      }
    }

    // Context
    if (module_exists('context') && user_access('administer contexts')) {
      foreach (context_enabled_contexts() as $name => $context) {
        $menu_items[] = array(
          'type' => 'Context',
          'title' => 'Structure » Context » ' . ($context->tag ? $context->tag . ' » ' : '') . $name,
          'edit_url' => url('admin/structure/context/' . $name . '/edit')//
        );
      }
    }

    // Flush Cache
    if (user_access('flush caches')) {
      // $menu_items[] = array(
      //   'type' => 'Menu Item',
      //   'title' => 'Flush all caches',
      //   'edit_url' => url()
      // );
    }

    return $menu_items;
  }

}

/**
 * Init hook
 */
function jarvis_init() {
  if (!user_is_logged_in()) 
    return;

  Jarvis::instance()->init();

  // Load Jarvis javascript
  drupal_add_js(drupal_get_path('module', 'jarvis') . '/js/jquery-ui-1.10.2.custom.js');
  drupal_add_js(Jarvis::instance()->localize(), 'inline');
  drupal_add_js(drupal_get_path('module', 'jarvis') . '/js/jarvis.js');

  // Load Jarvis CSS
  drupal_add_css(drupal_get_path('module', 'jarvis') . '/css/jquery-ui-1.10.2.custom.css');
  drupal_add_css(drupal_get_path('module', 'jarvis') . '/css/jarvis.css');
}

/**
 * Menu hook
 */
function jarvis_menu() {
  if (!user_is_logged_in()) 
    return;

  Jarvis::instance()->init();

  $items = array();
  // Jarvis node search
  $items[Jarvis::instance()->ajax_search] = array(
    'page callback' => '_jarvis_search',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  
  return $items;
}

/**
 * Internal Jarvis Search
 */
function _jarvis_search() {
  return Jarvis::instance()->search();
}