<?php 
/**
 * @file
 * Main Jarvis class
 */

/**
 * Jarvis Class
 */
class Jarvis {

	private $hotkey;

  /**
   * Singleton instance
   */
  private static $instance = false;

  /**
   * Singleton
   * @return Plugin
   */
  public static function instance() {
    if (!self::$instance) {
      self::$instance = new self();
    }
    return self::$instance;
  }

  public function init() {
    // Hotkey is '/'
    $this->hotkey = 191;
  }

  public function localize() {
    $jarvis = array(
      'hotkey' => $this->hotkey,
      'menus' => null
    );

    $management = menu_tree_all_data('management');
    $user = menu_tree_all_data('user-menu');

    // Combine management and user menus
    $jarvis['menus'] = array_merge_recursive($management, $user);

   return 'var jarvis = ' . json_encode($jarvis) . ';'; //, JSON_PRETTY_PRINT
  }

  public function search() {
    $_REQUEST['q'] = isset($_REQUEST['q']) ? $_REQUEST['q'] : '';
    
    $srch_qry = $_REQUEST['q'];
    // @see https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_like/7
    $srch_escaped_spaces = str_replace(' ', '%', db_like($srch_qry));

    $arrRtrn = array(
      'results' => array(), 
      'types' => array(), 
    );

    if ( strlen($srch_qry) ) {
      // Search DB for nodes with related titles.  Sort by relevance of search phrase related to title.
      $strQry = "   SELECT \n" . 
                "     n.nid AS 'id', \n" . 
                "     n.type AS 'type', \n" . 
                "     n.title AS 'title', \n" . 
                "     'node' AS 'kind',  \n" . 
                "     n.`status`, \n" . 
                "      ((LENGTH(n.title) - LENGTH(REPLACE(LOWER(n.title), LOWER(:q), ''))) / LENGTH(n.title)) AS 'relv_title' \n" . 
                "   FROM \n" . 
                "     {node} n \n" . 
                "     LEFT JOIN {taxonomy_index} ti ON n.nid = ti.nid \n" . 
                "     LEFT JOIN {taxonomy_term_data} ttd ON ti.tid = ttd.tid \n" . 
                "   WHERE \n" . 
                "     n.title LIKE :qtitle OR \n" . 
                "     n.nid = :qnid OR \n" . 
                "     ttd.`name` LIKE :qname \n" . 
                "   ORDER BY relv_title DESC";

      // @see https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_query/7
      $result = db_query($strQry, array(
        ':q' => $srch_qry,
        ':qtitle' => '%' . $srch_escaped_spaces . '%',
        ':qnid' => $srch_qry,
        ':qname' => '%' . $srch_escaped_spaces . '%',
      ));

      // DEBUGGING
      $arrRtrn['query'] = $strQry;

      $results = $result->fetchAll();

      foreach($results as $itmIdx => $itmRrd) {
        $tmpType = $itmRrd->type;
        $tmpKind = $itmRrd->kind;
        $tmpId = $itmRrd->id;

        if( !isset($arrRtrn['types'][ $tmpType ]) ){
          $arrRtrn['types'][ $tmpType ] = array();
        }

        $arrRtrn['types'][ $tmpType ][ $tmpId ] = $itmIdx;

        $tmpArr = (array) $itmRrd;

        // Build link for nodes
        if($tmpArr['kind'] == 'node') {
          $nodeEdit = $tmpArr['id'];
          $tmpArr['edit_url'] = 'node/' . $nodeEdit . '/edit';
        }
        
        $arrRtrn['results'][] = $tmpArr;
      }
    }

    echo json_encode($arrRtrn);
  }

}

/**
 * Init hook
 */
function jarvis_init() {
  if (!user_is_logged_in()) 
    return;

  Jarvis::instance()->init();

  // Load Jarvis javascript
  drupal_add_js(drupal_get_path('module', 'jarvis') . '/js/jquery-ui-1.10.2.custom.js');
  drupal_add_js(Jarvis::instance()->localize(), 'inline');
  drupal_add_js(drupal_get_path('module', 'jarvis') . '/js/jarvis.js');

  // Load Jarvis CSS
  drupal_add_css(drupal_get_path('module', 'jarvis') . '/css/jquery-ui-1.10.2.custom.css');
  drupal_add_css(drupal_get_path('module', 'jarvis') . '/css/jarvis.css');
}

/**
 * Menu hook
 */
function jarvis_menu() {

  $items = array();
  // Jarvis node search
  $items['jarvis/autocomplete'] = array(
    'page callback' => 'jarvis_search',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  
  return $items;
}

/**
 * Internal Jarvis Search
 */
function jarvis_search() {
  return Jarvis::instance()->search();
}